name: Create releases
on:
#  schedule:
#    - cron: '0 5 * * *' # every day at 5am UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    name: release
    if: github.ref == 'refs/heads/main' && github.repository == 'spate141/VerbalVista'
    runs-on: ubuntu-latest
    environment: publish

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Calculate new version
        id: calc_version
        run: |
          # Fetch the latest release tag from the GitHub API
          LATEST_TAG=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          
          echo "Latest tag: $LATEST_TAG"
          echo "::set-output name=OLD_VERSION::$LATEST_TAG"
          
          # Assuming the tag is in the format vM.N, split it to get M and N
          IFS='.' read -ra VERSION <<< "${LATEST_TAG//v/}"
          MAJOR=${VERSION[0]}
          MINOR=${VERSION[1]}
          
          # Check if the minor version is 9, then increment the major version and reset minor to 0
          if [ "$MINOR" -eq 9 ]; then
            NEW_MAJOR=$(($MAJOR + 1))
            NEW_MINOR=0
          else
            # Otherwise, simply increment the minor version
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$(($MINOR + 1))
          fi
          
          # Construct the new version tag
          NEW_TAG="$NEW_MAJOR.$NEW_MINOR"
          echo "New version: $NEW_TAG"
          echo "::set-output name=NEW_VERSION::$NEW_TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch latest commit SHA on main
        id: latest_commit
        run: |
          LATEST_COMMIT_SHA=$(git rev-parse HEAD)
          echo "Latest commit SHA on main: $LATEST_COMMIT_SHA"
          echo "::set-output name=SHA::$LATEST_COMMIT_SHA"

      - name: Fetch commit SHA for last release tag
        id: last_release_commit
        run: |
          LAST_RELEASE_TAG_SHA=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/git/ref/tags/${{ steps.calc_version.outputs.OLD_VERSION }} | jq -r '.object.sha')
          echo "Last release tag SHA: $LAST_RELEASE_TAG_SHA"
          echo "::set-output name=SHA::$LAST_RELEASE_TAG_SHA"
        
      - name: Check if new release is needed
        id: check_release
        run: |
          if [ "${{ steps.latest_commit.outputs.SHA }}" == "${{ steps.last_release_commit.outputs.SHA }}" ]; then
            echo "No changes since the last release. Skipping new release creation."
            echo "::set-output name=NEED_RELEASE::false"
          else
            echo "Changes detected. Proceeding with new release creation."
            echo "::set-output name=NEED_RELEASE::true"
          fi

      - name: Fetch Commits Between Releases
        id: commits_between
        run: |
          COMMIT_DIFF=$(git log --pretty=format:"%h - %s (%an, %ad)" ${{ steps.last_release_commit.outputs.SHA }}..${{ steps.latest_commit.outputs.SHA }} --date=short)
          echo "::set-output name=COMMIT_DIFF::$COMMIT_DIFF"

      - name: Create GitHub Release
        if: steps.check_release.outputs.NEED_RELEASE == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.calc_version.outputs.NEW_VERSION }}
          release_name: v${{ steps.calc_version.outputs.NEW_VERSION }}
          body: |
            Changelog: https://github.com/${{ github.repository }}/compare/${{ steps.calc_version.outputs.OLD_VERSION }}...${{ steps.calc_version.outputs.NEW_VERSION }}
            Commits:
            ${{ steps.commits_between.outputs.COMMIT_DIFF }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
